// <auto-generated />
using System;
using BankingSystemDataAccess.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankingSystemDataAccess.Postgres.Migrations
{
    [DbContext(typeof(BankingSystemDbContext))]
    partial class BankingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.AccountsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CloseDate")
                        .HasColumnType("date");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("OpenDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ClientsId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.ClientsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressRegistration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateRegistration")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.CreditsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LeftCreadit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PaymentMonth")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("SumCredit")
                        .HasColumnType("numeric");

                    b.Property<int>("TermMonth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClientId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.DepositsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PercentYear")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("SumDeposit")
                        .HasColumnType("numeric");

                    b.Property<int>("TermMonth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClientId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.OperationsTransactionsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOperation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationsTransactions");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.TransactionsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ConsumerAccount")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProducerAccount")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeOperation")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeOperation");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.UsersEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.AccountsEntity", b =>
                {
                    b.HasOne("BankingSystemDataAccess.Postgres.Models.ClientsEntity", "Clients")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.CreditsEntity", b =>
                {
                    b.HasOne("BankingSystemDataAccess.Postgres.Models.AccountsEntity", "Accounts")
                        .WithMany("Credits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankingSystemDataAccess.Postgres.Models.ClientsEntity", "Clients")
                        .WithMany("Credits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.DepositsEntity", b =>
                {
                    b.HasOne("BankingSystemDataAccess.Postgres.Models.AccountsEntity", "Accounts")
                        .WithMany("Deposits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankingSystemDataAccess.Postgres.Models.ClientsEntity", "Clients")
                        .WithMany("Deposits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.TransactionsEntity", b =>
                {
                    b.HasOne("BankingSystemDataAccess.Postgres.Models.OperationsTransactionsEntity", "OperationsTransactions")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeOperation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OperationsTransactions");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.AccountsEntity", b =>
                {
                    b.Navigation("Credits");

                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.ClientsEntity", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Credits");

                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("BankingSystemDataAccess.Postgres.Models.OperationsTransactionsEntity", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
